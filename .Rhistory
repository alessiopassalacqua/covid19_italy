annotate(geom = "text", x = 5, y = 65000,
label = "Fit logistico", hjust = 0) +
annotate(geom = "segment", x = 2.5,xend = 4,
y = 65000,yend=65000) +
annotate("pointrange", x = 3.5, y = 60000, ymin = 59500,
ymax = 60500,colour = "orange", size = 0.7)+
annotate(geom = "text", x = 5, y = 60000,
label = "Italy", hjust = 0) +
labs(title = "Confronto Italia - Cina",
subtitle = "Casi Totali",
caption = "Source: Gapminder.org",
x = "Giorni",
y = "Totale Positivi")
ggplot(xy,aes(x=x,y=y)) +
geom_point() +
geom_line(aes(y=fit)) +
geom_point(colour="orange",aes(y=italy)) +
annotion_custom(grob) +
annotate(geom = "text", x =  5, y = 70000,
label = "China", hjust = 0) +
annotate("pointrange", x = 3.5, y = 70000, ymin = 69500,
ymax = 70500,colour = "black", size = 0.7)+
annotate(geom = "text", x = 5, y = 65000,
label = "Fit logistico", hjust = 0) +
annotate(geom = "segment", x = 2.5,xend = 4,
y = 65000,yend=65000) +
annotate("pointrange", x = 3.5, y = 60000, ymin = 59500,
ymax = 60500,colour = "orange", size = 0.7)+
annotate(geom = "text", x = 5, y = 60000,
label = "Italy", hjust = 0) +
labs(title = "Confronto Italia - Cina",
subtitle = "Casi Totali",
caption = "Source: Gapminder.org",
x = "Giorni",
y = "Totale Positivi")
ggplot(xy,aes(x=x,y=y)) +
geom_point() +
geom_line(aes(y=fit)) +
geom_point(colour="orange",aes(y=italy)) +
annotation_custom(grob) +
annotate(geom = "text", x =  5, y = 70000,
label = "China", hjust = 0) +
annotate("pointrange", x = 3.5, y = 70000, ymin = 69500,
ymax = 70500,colour = "black", size = 0.7)+
annotate(geom = "text", x = 5, y = 65000,
label = "Fit logistico", hjust = 0) +
annotate(geom = "segment", x = 2.5,xend = 4,
y = 65000,yend=65000) +
annotate("pointrange", x = 3.5, y = 60000, ymin = 59500,
ymax = 60500,colour = "orange", size = 0.7)+
annotate(geom = "text", x = 5, y = 60000,
label = "Italy", hjust = 0) +
labs(title = "Confronto Italia - Cina",
subtitle = "Casi Totali",
caption = "Source: Gapminder.org",
x = "Giorni",
y = "Totale Positivi")
grob <- grobTree(textGrob("Scatter plot", x=20,  y=21000, hjust=0,
gp=gpar(col="red", fontsize=13, fontface="italic")))
ggplot(xy,aes(x=x,y=y)) +
geom_point() +
geom_line(aes(y=fit)) +
geom_point(colour="orange",aes(y=italy)) +
annotation_custom(grob) +
annotate(geom = "text", x =  5, y = 70000,
label = "China", hjust = 0) +
annotate("pointrange", x = 3.5, y = 70000, ymin = 69500,
ymax = 70500,colour = "black", size = 0.7)+
annotate(geom = "text", x = 5, y = 65000,
label = "Fit logistico", hjust = 0) +
annotate(geom = "segment", x = 2.5,xend = 4,
y = 65000,yend=65000) +
annotate("pointrange", x = 3.5, y = 60000, ymin = 59500,
ymax = 60500,colour = "orange", size = 0.7)+
annotate(geom = "text", x = 5, y = 60000,
label = "Italy", hjust = 0) +
labs(title = "Confronto Italia - Cina",
subtitle = "Casi Totali",
caption = "Source: Gapminder.org",
x = "Giorni",
y = "Totale Positivi")
ggplot(xy,aes(x=x,y=y)) +
geom_point() +
geom_line(aes(y=fit)) +
geom_point(colour="orange",aes(y=italy)) +
annotation_custom(grob) +
annotate(geom = "text", x =  5, y = 70000,
label = "Cina", hjust = 0) +
annotate("pointrange", x = 3.5, y = 70000, ymin = 69500,
ymax = 70500,colour = "black", size = 0.7)+
annotate(geom = "text", x = 5, y = 65000,
label = "Fit logistico", hjust = 0) +
annotate(geom = "segment", x = 2.5,xend = 4,
y = 65000,yend=65000) +
annotate("pointrange", x = 3.5, y = 60000, ymin = 59500,
ymax = 60500,colour = "orange", size = 0.7)+
annotate(geom = "text", x = 5, y = 60000,
label = "Italia", hjust = 0) +
labs(title = "Confronto Italia - Cina",
subtitle = "Casi Totali",
caption = "Source: Gapminder.org",
x = "Giorni",
y = "Totale Positivi")
ggplot(xy,aes(x=x,y=y)) +
geom_point() +
geom_line(aes(y=fit)) +
geom_point(colour="orange",aes(y=italy)) +
annotation_custom(grob) +
annotate(geom = "text", x =  5, y = 70000,
label = "Cina", hjust = 0) +
annotate("pointrange", x = 3.5, y = 70000, ymin = 69500,
ymax = 70500,colour = "black", size = 0.7)+
annotate(geom = "text", x = 5, y = 65000,
label = "Fit logistico", hjust = 0) +
annotate(geom = "segment", x = 2.5,xend = 4,
y = 65000,yend=65000) +
annotate("pointrange", x = 3.5, y = 60000, ymin = 59500,
ymax = 60500,colour = "orange", size = 0.7)+
annotate(geom = "text", x = 5, y = 60000,
label = "Italia", hjust = 0) +
labs(title = "Confronto Italia - Cina",
subtitle = "Casi Totali",
caption = "Dati Italia: Protezione Civile \n
Dati Cina: Johns Hopkins CSSE",
x = "Giorni",
y = "Totale Positivi")
ggplot(xy,aes(x=x,y=y)) +
geom_point() +
geom_line(aes(y=fit)) +
geom_point(colour="orange",aes(y=italy)) +
annotation_custom(grob) +
annotate(geom = "text", x =  5, y = 70000,
label = "Cina", hjust = 0) +
annotate("pointrange", x = 3.5, y = 70000, ymin = 69500,
ymax = 70500,colour = "black", size = 0.7)+
annotate(geom = "text", x = 5, y = 65000,
label = "Fit logistico", hjust = 0) +
annotate(geom = "segment", x = 2.5,xend = 4,
y = 65000,yend=65000) +
annotate("pointrange", x = 3.5, y = 60000, ymin = 59500,
ymax = 60500,colour = "orange", size = 0.7)+
annotate(geom = "text", x = 5, y = 60000,
label = "Italia", hjust = 0) +
labs(title = "Confronto Italia - Cina",
subtitle = "Casi Totali Coronavirus",
caption = "Dati Italia: Protezione Civile \n
Dati Cina: Johns Hopkins CSSE",
x = "Giorni",
y = "Totale Positivi")
library(flexdashboard)
library(ggplot2)
library(highcharter)
library(gtrendsR)
library(lubridate)
library(dplyr)
library(stringr)
library(viridisLite)
library(DT)
library(magrittr)
library(dygraphs)
library(plotly)
library(xts)
library(viridis)
library(leaflet)
library(tmap)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")),
xAxis = list( gridLineWidth = 1)
)
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
# covid x regioni
covid_italy <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
# covid nazionale
covid_italy_sum <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
# covid x province
covid_itpro <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province.csv")
covid_italy %<>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
select(-denominazione_regione,
-stato,
-codice_regione,
-lat,
-long,) %>%
mutate(regione = ifelse(.$regione == "P.A. Trento","Trentino-Alto Adige",.$regione))%>%
mutate( regione = ifelse(.$regione == "P.A. Bolzano","Trentino-Alto Adige",.$regione)) %>%
group_by(regione,data) %>%
summarize_all(~sum(.)) %>%
ungroup(regione) %>%
arrange(desc(data),desc(totale_casi))
covid_italy_sum %<>%
mutate(data = date(data))
today <- max(covid_italy$data)
covid_italy_map <-
covid_italy %>%
filter(data == today) %>%
select("regione","totale_attualmente_positivi")
map_ita <- readRDS("map_ita_json.RDS")
region_list <- c("Piemonte","Valle d'Aosta","Lombardia",
"Trentino-Alto Adige","Veneto",
"Friuli Venezia Giulia","Liguria","Emilia Romagna",
"Toscana","Umbria","Marche","Lazio",
"Abruzzo","Molise","Campania","Puglia","Basilicata",
"Calabria","Sicilia","Sardegna")
for(i in 1:20){
map_ita[["features"]][[i]][["properties"]][["name"]] <- region_list[i]
#  cat(map_ita[["features"]][[i]][["properties"]][["name"]],"\n")
}
covid_itpro  %<>%
mutate(data = date(data))
geo_italy <- geojsonio::geojson_read("limits_IT_provinces.geojson", what = "sp")
pal <- colorNumeric("viridis", NULL)
geo_italy$prov_name <- as.character(geo_italy$prov_name)
geo_italy$prov_name <- ifelse(geo_italy$prov_name == "Valle d'Aosta/VallÃ©e d'Aoste","Aosta",geo_italy$prov_name )
geo_italy$prov_name <- ifelse(geo_italy$prov_name == "Bolzano/Bozen","Bolzano",geo_italy$prov_name )
geo_italy$prov_name <- ifelse(geo_italy$prov_name == "Massa-Carrara","Massa Carrara",geo_italy$prov_name )
covid_itpro %<>%
filter(denominazione_provincia != "In fase di definizione/aggiornamento") %>%
filter(data == today)
covid_province <-
sp::merge(geo_italy,covid_itpro,by.x="prov_name", by.y="denominazione_provincia")
tot <- covid_italy_sum %>%
filter(data == today) %>%
select(totale_casi ) %>%
pull
tot_1 <- covid_italy_sum %>%
filter(data == today-1) %>%
select(totale_casi ) %>%
pull
valueBox(value = paste(tot, "", " (+",
round(100 * (tot-tot_1)/tot_1 , 1),
"%)",
sep = ""),
caption = "Casi Totali",
icon = "fas fa-user-md",
color = confirmed_color)
source('~/R-TRAINER/R-GIT/covid19_italy/chinaVsitaly.R')
source('~/R-TRAINER/R-GIT/covid19_italy/chinaVsitaly.R')
library(flexdashboard)
library(ggplot2)
library(highcharter)
library(gtrendsR)
library(lubridate)
library(dplyr)
library(stringr)
library(viridisLite)
library(DT)
library(magrittr)
library(dygraphs)
library(plotly)
library(xts)
library(viridis)
library(leaflet)
library(tmap)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")),
xAxis = list( gridLineWidth = 1)
)
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
# covid x regioni
covid_italy <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
# covid nazionale
covid_italy_sum <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
# covid x province
covid_itpro <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province.csv")
covid_italy %<>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
select(-denominazione_regione,
-stato,
-codice_regione,
-lat,
-long,) %>%
mutate(regione = ifelse(.$regione == "P.A. Trento","Trentino-Alto Adige",.$regione))%>%
mutate( regione = ifelse(.$regione == "P.A. Bolzano","Trentino-Alto Adige",.$regione)) %>%
group_by(regione,data) %>%
summarize_all(~sum(.)) %>%
ungroup(regione) %>%
arrange(desc(data),desc(totale_casi))
library(flexdashboard)
library(ggplot2)
library(highcharter)
library(gtrendsR)
library(lubridate)
library(dplyr)
library(stringr)
library(viridisLite)
library(DT)
library(magrittr)
library(dygraphs)
library(plotly)
library(xts)
library(viridis)
library(leaflet)
library(tmap)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")),
xAxis = list( gridLineWidth = 1)
)
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
# covid x regioni
covid_italy <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
# covid nazionale
covid_italy_sum <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
# covid x province
covid_itpro <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province.csv")
covid_italy %<>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
select(-denominazione_regione,
-stato,
-codice_regione,
-lat,
-long,) %>%
mutate(regione = ifelse(.$regione == "P.A. Trento","Trentino-Alto Adige",.$regione))%>%
mutate( regione = ifelse(.$regione == "P.A. Bolzano","Trentino-Alto Adige",.$regione)) %>%
group_by(regione,data) %>%
summarize_all(~sum(.)) %>%
ungroup(regione) %>%
arrange(desc(data),desc(totale_casi))
library(flexdashboard)
library(ggplot2)
library(highcharter)
library(gtrendsR)
library(lubridate)
library(dplyr)
library(stringr)
library(viridisLite)
library(DT)
library(magrittr)
library(dygraphs)
library(plotly)
library(xts)
library(viridis)
library(leaflet)
library(tmap)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")),
xAxis = list( gridLineWidth = 1)
)
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
# covid x regioni
covid_italy <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
# covid nazionale
covid_italy_sum <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
# covid x province
covid_itpro <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province.csv")
covid_italy %>% glimpse()
covid_italy %>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
select(-denominazione_regione,
-stato,
-codice_regione,
-lat,
-long,) %>%
glimpse()
covid_italy %>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
glimpse()
covid_italy %>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
select(-denominazione_regione,
-stato,
-codice_regione,
-lat,
-long,) %>%
glimpse()
covid_italy %>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
select(-denominazione_regione,
-stato,
-codice_regione,
-lat,
-long)
covid_italy %>%
mutate(data = date(data)) %>%
mutate(regione = as.character(denominazione_regione)) %>%
glimpse()
source('~/R-TRAINER/R-GIT/covid19_italy/sigmoid.R')
covid_italy_sum <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
y <-
coronavirus %>%
filter(Country.Region == "Mainland China") %>%
filter(type =="confirmed") %>%
group_by(date,type) %>%
summarise(cases = sum(cases)) %>%
group_by(type) %>%
mutate(cases_tot = cumsum(cases)) %>%
pull(cases_tot)
library(dplyr)
library(drc)
y <-
coronavirus %>%
filter(Country.Region == "Mainland China") %>%
filter(type =="confirmed") %>%
group_by(date,type) %>%
summarise(cases = sum(cases)) %>%
group_by(type) %>%
mutate(cases_tot = cumsum(cases)) %>%
pull(cases_tot)
covid_italy_sum <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
y <- covid_italy_sum$totale_casi
x <- 0:( length(covid_italy_sum$totale_casi) -1)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(b= 2.43758048e-01, a=4.31177862e+04, c=1.95312145e+01))
xy <- data.frame(x=x,y=y)
model <- drm(y ~ x, fct = L.3(), data = xy)
summary(model)
plot(model, log="", main = "Logistic function")
x <- 1:50
y <- 1:50
xy <- data.frame(x=x,y=y)
yp <- predict(model,xy)
plot(x,yp)
?predict
predict(model,xy,interval = 'prediction')
yx_pred <-predict(model,xy,interval = 'prediction')
ggplot(xy_pred,aes(x=x,y=Prediction))  +
geom_point() +
geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
library(ggplot2)
ggplot(xy_pred,aes(x=x,y=Prediction))  +
geom_point() +
geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
yx_pred <-predict(model,xy,interval = 'prediction')
library(ggplot2)
ggplot(xy_pred,aes(x=x,y=Prediction))  +
geom_point() +
geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
xy_pred <-predict(model,xy,interval = 'prediction')
library(ggplot2)
ggplot(xy_pred,aes(x=x,y=Prediction))  +
geom_point() +
geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
xy_pred
xy_pred <-
predict(model,xy,interval = 'prediction') %>%
data.frame()
library(ggplot2)
ggplot(xy_pred,aes(x=x,y=Prediction))  +
geom_point() +
geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
cy
xy_pred
ggplot(xy_pred,aes(x=x,y=Prediction))  +
geom_point() +
geom_line(aes(y = Lower), color = "red", linetype = "dashed")+
geom_line(aes(y = Upper), color = "red", linetype = "dashed")
source('~/R-TRAINER/R-GIT/covid19_italy/sigmoid.R')
library(dplyr)
# function needed for visualization purposes
sigmoid = function(params, x) {
params[1] / (1 + exp(-params[2] * (x - params[3])))
}
covid_italy_sum <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
library(drc)
y <- covid_italy_sum$totale_casi
x <- 0:( length(covid_italy_sum$totale_casi) -1)
# fitting code
fitmodel <- nls(y~a/(1 + exp(-b * (x-c))), start=list(b= 2.43758048e-01, a=4.31177862e+04, c=1.95312145e+01))
xy <- data.frame(x=x,y=y)
model <- drm(y ~ x, fct = L.3(), data = xy)
summary(model)
plot(model, log="", main = "Logistic function")
x <- 1:50
y <- 1:50
xy <- data.frame(x=x,y=y)
xy_pred <-
predict(model,xy,interval = 'prediction') %>%
data.frame()
library(ggplot2)
ggplot(xy_pred,aes(x=x,y=Prediction))  +
geom_point() +
geom_line(aes(y = Lower), color = "red", linetype = "dashed")+
geom_line(aes(y = Upper), color = "red", linetype = "dashed")
